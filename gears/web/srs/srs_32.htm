<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta name="Template_Author" content="John Cox">
<title>SRS: 3.0 Software Requirements</title>
</head>
<body>
<h2>3.2 External Interfaces</h2>

<p>This section describes the external interfaces, including the keyboard, mouse, printer, and monitor.  Specifically, on the monitor, the Graphical User Interface requirements are discussed.</p>

<h3><a name="UI">3.2.1 User Interfaces</a></h3>

<p>The User Interface is modeled after a generic IDE and generic text editor.  For the purpose of having  a range of functionality, the Visual Interface will be capable of growing more complex as the functionality increases.</p>

<h4><a name="intro">3.2.1.1 Introduction</a></h4>

<p>As stated above, the user interface is required to adapt.  As the IDE can be used to do more, the user interface will need to grow more complex to allow for use of the increasing number of available features.  In it's simplest form, the user interface will resemble that of a text editor much like notepad, with the majority of the screen being devoted to text entry with a few simple menus with simple menu items.  In the most complex form, it will resemble a Visual C++ with more menu items & specialized menu items, many diverse buttons, and two or more docked windows displaying information as well as a docked/undocked terminal window.</p>

<h4><a name="map">3.2.1.2 User Interface Map</a></h4>

<p>The Graphical User Interface will consist of a main window with four sub-windows. These sub-windows would be for the Editor, Debugger/Compilation/Messages, Project/Files Management, and a Terminal window.</p>
<p>Because of adaptability, these the only sub-window that will always exist is the editing window.  The others will appear as the complexity of the IDE increases.</p>

<h4><a name="screen">3.2.1.3 Screen Designs</a></h4>

<p>In its initial state, Chameleon will look something like:</p>
    <img src="images/mockup.png"><br><br>
    
<p>With everything turned on, it should look like one of these: </p>
    <img src="images/screen01.jpg" width="50%" height="50%"><br>
    <img src="images/screen02.jpg" width="50%" height="50%"><br>

   
   <br>
   

<h4><a name="report">3.2.1.4 Report Formats</a></h4>
7888
<p>Report formats have not been determined yet.</p>

<h3><a name="HI">3.2.2 Hardware Interfaces</a></h3>

<<<<<<< srs_32.htm
<p>There are no specific requirements regarding how the product interfaces with any particular hardware.  There will be Mouse interactions, because it is a graphical user interface.  There will be normal keyboard interactions for code entry.  And, there will be a screen for displaying the user interface.  Most other user hardware is irrelevant to the I.D.E..</p>
=======
<p>Chameleon will interface with generic hardware: monitor, mouse, keyboard, storage devices.  Special hardware such as network cards / modems will be interfaced through the operating system.  While communicating with the Linux server, it is expected that a network connection will be present before requests are sent to the host operating system.  Storage device I/O will also be generically performed through the host operating system.  Special hardware devices are not supported, such as pen mice, beyond what the operating system can emulate as a standard I/O device.</p>
<!--<p>There are no specific requirements regarding how the product interfaces with any particular hardware.  There will be Mouse interactions, because it is a graphical user interface.  And, there will be normal keyboard interactions for code entry.  Most other user hardware is irrelevant to the I.D.E..</p>-->
>>>>>>> 1.5

<h3><a name="SI">3.2.3 Software Interfaces</a></h3>

<<<<<<< srs_32.htm
<p>The Operating System will need to be interfaced with for networking and graphical presentation.  Chameleon will also need to interface with a compiler, debugger, and SSH2 client.  Chameleon's direct interactions with these will be moslty command line based.</p>
<p>Ideally, interfacing with the CS4310 Visual Debugger Program and Virtual Professor will be possible.  Interfacing with them has not been deined yet.</p>
=======
<p>The Operating System will need to be interfaced with for networking and graphical presentation.  Chameleon will also need to interface with a compiler and debugger.  The interactions will be mostly command line based.   There is also the possibility of the need to interface with SSH Client software, but this interaction has not been developed completely, yet.</p>
<p>Once the development of a visual debugger is accomplished, it will be interfacing with Chameleon.</p>
>>>>>>> 1.5

<h3><a name="CI">3.2.4 Communication Interfaces</a></h3>

<<<<<<< srs_32.htm
<p>The objects that exist outside the scope of this project include the Linux server machine to which there will be communication.  This server machine will be interfaced with the Chameleon through an SSH2 Client because of the need to do secure command line operations and file transfer.</p> 
=======
<p>The objects that exist outside the locality of this project include the Linux server machine to which there will be communication.  This server machine will be interfaced with the Chameleon through the networking layer of the operating system.  It is likely that the openSSH 2.0 protocol will be used for this interfacing because of the need to do secure command line operations and file transfer.</p> 
>>>>>>> 1.5

<hr>
<center>
<table summary="navigation">
<tr>
<td height="100" width="60"><a href="../index.html"><img src=
"../images/home.gif" align="BOTTOM" alt="Home" border="0">
</a></td>
<td height="100" width="60"><a href="srs.htm"><img src=
"../images/toc.gif" align="BOTTOM" alt="TOC" border="0"></a></td>
<td height="100" width="60"><a href="srs_31.htm"><img src=
"../images/prev.gif" align="BOTTOM" alt="Prev" border="0">
</a></td>
<td height="100" width="60"><a href="srs_33.htm"><img src=
"../images/next.gif" align="BOTTOM" alt="Next" border="0">
</a></td>
</tr>
</table>
</center>

Document modified on 

<script type="text/javascript" language="JavaScript">
<!--
        document.write(document.lastModified + " GMT")
// -->
</script>
</body>
</html>

