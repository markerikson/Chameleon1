<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <meta name="Template_Author" content="John Cox">
    <title>Maintenance Manual</title>
  </head>

  <body>

    <h1>4.0 - Project Status</h1>

    <h2>4.1 - Implemented Features</h2>
    <p>Overall, we did a good job of creating what we set out to do.  All major features exist, and are fairly robust.</p>
    <dl>
      <dt><h3>Professor Options Program: Done.</h3></dt>
        <dd>Simple, useful, and it works. The only time anything about this would change is if new permissions were added, in which case a simple recompile of this program should suffice.</dd>
      <dt><h3>Dynamically Adapting GUI: Done.</h3></dt>
        <dd>Enabling and Disabling features make GUI elements appear and disappear. Again, nothing needs to be changed unless new features are added.</dd>
      <dt><h3>Built-in Terminal: Done.</h3></dt>
        <dd>Works well for the intended users.  It is possible an advanced user may , limitations may be discovered.</dd>
      <dt><h3>Syntax Highlighting: Done.</h3></dt>
        <dd>Internal to the Scintilla Widget.</dd>
      <dt><h3>Multi-file Projects: Done.</h3></dt>
        <dd>The code is tied a little more tightly to the GUI than we would have liked.  But, for this Chameleon a project is basically a list of files.  Any additional project related features may require separating this out.</dd>
      <dt><h3>Integrated Debugger: Done.</h3></dt>
        <dd>We accomplished what we wanted, which was cross-platform debugging using GDB while inside of Chameleon. It is limited in features, but it works.  Some optimizations could be made inside the debugger regarding how it handles variable watching, but it works fine as-is.</dd>
      <dt><h3>Editor Features: Done.</h3></dt>
        <dd>Clipboard manipulation, text manipulation, and the like are all working. There are always more that could be added, but no critical features are missing.</dd>
      <dt><h3>Compiling: Done.</h3></dt>
        <dd>Press a button, it compiles.  User is limited to linking with only 1 library.</dd>
      <dt><h3>Remote File Transparency: Done.</h3></dt>
        <dd>There are some minor glitches with handling empty files, and the user is limited to their home directory and anything higher in the directory structure.  All else is done, and functions as expected.</dd>
    </dl>

    <h2>4.2 - Unimplemented Features</h2>
    <dl>
      <dt><h3>Auto-Completion/Object Member Completion.  Definately Useful.</h3></dt>
        <dd>This is not a necessary feature, but if implemented would be useful.  We underestimated the complexity of this feature, and ran out of time.  The Scintilla Widget has the hooks to display popup windows for autocompletion and member completion, which is why this feature was added to the requirements list.  But, the Editor would be responsible for keeping track of what's typed and telling Scintilla to pop up a window with the appropriate information.</dd>
      <dt><h3>Code Folding.  Potentially Useful.</h3></dt>
        <dd>Again, Scintilla supports this, and shouldn't be that hard to implement. We just didn't have enough time.</dd>
    </dl>

    <br>

    <h2>4.3 - Future Enhancements</h2>
    <dl>
      <dt><h3>Auto-Completion/Object Member Completion.</h3></dt>
        <dd>Autocompletion alone would require a lot of work, and Member completion is even more complicated. To list the members of an object, the program needs to have parsed the declaration of that object. Implementing either of these abilities would require a nearly-full C++ parser, few of which are easily accessible. One potential possibility is to adapt the C++ parser from the Dev-CPP IDE (http://sourceforge.net/projects/dev-cpp). Additionally, there are potential issues regarding parsing files that are located on the remote server.</dd>
      <dt><h3>Code Folding.</h3></dt>
      <dt><h3>Additional Debugger Features.</h3></dt>
      <dt><h3>Enable PlinkConnect to reuse connections.</h3></dt>
        <dd>This would only be an optimization.</dd>
      <dt><h3>Do directory-listing caching within Networking.</h3></dt>
        <dd>This would only be an optimization.</dd>
      <dt><h3>Server-based Options-Enabling.</h3></dt>
      <dt><h3>Better integration with "Virtual Professor" & "Debugganator".</h3></dt>
      <dt><h3>Password Saving.</h3></dt>
        <dd>We chose not to deal with the security issues associated with this feature.  It would have been quite useful during development, since we had to type in our passwords every restart. But, for the average user this probably won't be nearly as much of an issue. One possible way of encrypting the password would be the TEA algorithm, a sample of which is located at http://www.jujusoft.com/tech/tea.html</dd>
      <dt><h3>Run/Execute Feature.</h3></dt>
      <dt><h3>Auto-Save/Backup Save.</h3></dt>
      <dt><h3>Integrate the Plink code more directly into Chameleon instead of running it externally.</h3></dt>
      <dt><h3>Port to Linux.</h3></dt>
    </dl>


    <hr>
    <center>
      <table summary="navigation"><tr>
        <td height="100" width="60"><a href="../index.html"><img src="../images/home.gif" align="bottom" alt="Home" border="0"></a></td>
        <td height="100" width="60"><a href="maint.htm"><img src="../images/toc.gif" align="bottom" alt="TOC" border="0"></a></td>
        <td height="100" width="60"><a href="maint_3.htm"><img src="../images/prev.gif" align="bottom" alt="Previous" border="0"></a></td>
        <td height="100" width="60"><a href="maint_5.htm"><img src="../images/next.gif" align="bottom" alt="Next" border="0"></a></td>
      </tr></table>
    </center>
    Document modified on
    <script type="text/javascript" language="JavaScript">
      <!--
        document.write(document.lastModified + " GMT")
      // -->
    </script>

  </body>

</html>
