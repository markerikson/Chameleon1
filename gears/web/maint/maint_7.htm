<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <title>Maintenance Manual</title>
  </head>

  <body>
  <h1>Developer's Guide</h1>

  <h2>GUI</h2>

  <h3>Main program</h3>
  <p>The ChameleonWindow class is basically the application itself.  All the user interaction happens there, and all the program logic starts there.  Most of the user interaction (menu items, toolbar clicks, etc) is handled in the OnMenuEvent function.  The only major exception is debug-related toolbar buttons, which are handled in OnDebugEvent.  </p>

	<h3>Terminal</h3>
	<p>90% of the terminal code was not written by our team.  Anyone needing to work with the terminal should really only have to deal with TextManager, wxTerm, and wxSSH.</p>
	<p>Here's a brief overview of how the terminal works.  At the core is the abstract GTerm class, which was written by someone named Timothy Miller.  It's responsible for handling the VT100 codes from the server and reacting appropriately, storing the text received from the server, and "drawing" the text and cursor.  The DrawText and DrawCursor functions are virtual, since GTerm is designed to have someone inherit a class from it and concretely implement the relevant functions.  See GTerm.doc in the misc/mark directory for more details.</p>
	<p>wxTerm is a concrete implementation of GTerm.  It's pretty much as we got it.  The only major modifications we made were adding UpdateSize(), setting the default font, logic for hiding the cursor if scrolled up, and a couple other minor tweaks.</p>
	<p>wxSSH is a fairly straightforward descendant of wxTerm, specialized for communicating over SSH using our PlinkConnect class.</p>
	<p>The TextManager class was custom-written by us to give GTerm the ability to scroll.  GTerm, in its original form, doesn't store any more text than is currently being displayed on the screen, so it can't scroll at all.  TextManager can store an arbitrary number of lines of text.  It tracks how many lines are currently being displayed (a "viewport"), as well as how far scrolled up it is.  The key to how it works is that GTerm will only try to access lines 0 to number displayed - 1, so TextManager is responsible for translating those relative numbers into the actual indices within its stored array of text.  We replaced all references in GTerm to the original text array with references to TextManager functions such as GetCharAdjusted().  Most of those are in utils.cpp, with a couple in actions.cpp.</p>

	<h3>RemoteFileDialog</h3>
	<p>We had to write a file dialog from scratch because the Windows common dialog is only capable of viewing the local computer and files shared on the network, and we needed to list directories on a Linux box.  The RFD's appearance is modeled after the standard Windows dialog.  It uses the Networking module to list directories.  When the user selects a file, it saves the filename, which is then retrieved by whoever needs it (in our case, ChameleonWindow).</p>

<h2>Other</h2>

<h3>Debugger</h3>
<p>The debugger is basically a state machine.  Ideally, at any given time we know what we've sent to GDB, and so we know what <em>should</em> be coming back.  The most important functions are onDebugEvent, which is where actions are initiated, and onProcessOutputEvent, which is called whenever text is received from GDB.  Pretty much everything else goes off from there.</p>

    <hr>
    <center>
      <table summary="navigation"><tr>
        <td height="100" width="60"><a href="../index.html"><img src="../images/home.gif" align="bottom" alt="Home" border="0"></a></td>
        <td height="100" width="60"><a href="maint.htm"><img src="../images/toc.gif" align="bottom" alt="TOC" border="0"></a></td>
        <td height="100" width="60"><a href="maint_62.htm"><img src="../images/prev.gif" align="bottom" alt="Previous" border="0"></a></td>
        <td height="100" width="60"> <!--NOT NEEDED FOR THE LAST PAGE//--> </td>
      </tr></table>
    </center>
    Document modified on
    <script type="text/javascript" language="JavaScript">
      <!--
        document.write(document.lastModified + " GMT")
      // -->
    </script>

  </body>

</html>
