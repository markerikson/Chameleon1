<html>
<head>
	<title>User Manual: Debugger</title>
	<style type="text/css">
	<!--
	body
	{
		font-family: Verdana, Arial, Helvetica;
	}
	.indent
	{
		font-size:normal;
		margin-left: 15px;
	}
	.aindent
	{
		font-size:normal;
		margin-left: 10px;
	}
	.pindent
	{
		font-size:"10pt";
		margin-left: 30px;
	}
	.lindent
	{
		font-size:"10pt";
		margin-left: 55px;
	}
        .code
	{
		font-size:"10pt";
		font-family:"Courier";
		margin-left: 35px;
	}
	-->
	</style>
</head>
<body>
<h1>7.0 Debugger</h1>

  <h2 class=aindent><a name="description">7.1 Description:</a></h2>
    
    <h3 class=indent>Definition:</h3>
    <p class=pindent>A <b>Debugger</b> is a software engineering tool that helps in locating and correcting programming errors.  It accomplishes this through the listed functions below.</p>

    <h3 class=indent>Purpose:</h3>
    <p class=pindent>As stated above, this is to help you, the programmer, fix hidden or unseen problems with your code.  In the midst of normal coding even seasoned veterans of the programming feild leave little hidden bugs in their code, like while-loops that don't terminate, or the wrong logic in an "if-then" statement.  The debugger enables you to stop a program's execution, look at what's going on with a line, and find bugs quicker than putting in hard-coded debug items (like print-statements for all variables).  With advanced data structures such as <i>trees</i> and <i>hash tables</i> this tool is indispensible in finding little hidden logic errors with datastructure construction.</p>

    <h3 class=indent>Example:</h3>
    <p class=pindent>Suppose for now you want to code a simple "if-then" tree like this:</p>
    <p class=code>if(a = b) {b = c *d;} else {...</p>
    <p class=pindent>You hard code into your program the following lines:</p>
    <p class=code>int a = 3, b = 6;</p>
    <p class=pindent>You expect the code in your "else" statement to be executed, but it never is.  Now is a great time to use the debugger, particularly the <i>step</i> and <i>variable contents</i> functionality listed below.</p>

  <h2 class=aindent><a name="functionality">7.2 Functionality:</a></h2>

    <h3 class=indent>Available Debugger Functions:</h3>
    <ol class=lindent>
	<li>Run</li>
	<li>Step</li>
	<li>Step Over</li>
	<li>Step Out</li>
	<li>Run to</li>
	<li>Breakpoint</li>
	<li>Variable Contents</li>
    </ol>

    <h3 class=indent>Use of Function:</h3>
    <ol class=lindent>
	<li>Run
        <p class=lindent>-simply start your program.  The program will then run until it encounters a problem or a breakpoint.</p></li>
	<li>Step
        <p class=lindent>-execute a single line of code.  This is most useful when watching variables to see exactly WHERE and WHEN a variable changes in a way that you don't understand or want.  This function will step into function calls.</p></li>
	<li>Step Over
        <p class=lindent>-execute a single line of code.  When executed in a main body program, this is exactly identical to STEP, however, when the line of code involves a function call, the function is invoked and run, and the program then stops on the next line.  In other words, this function treats ALL lines of code as single-lines.</p></li>
	<li>Step Out
        <p class=lindent>-leaves a function.  When you've stepped into a function and know that it works correctly, rather than just keep clicking STEP till you're out, click this to have the debugger automatically finish the function for you and stop on the line after the function call.</p></li>
	<li>Run to
        <p class=lindent>-run to a specific line number.  When you know your code is correct up to <i>line XX</i> use this function to have the debugger run your code up to that line.  The debugger will then stop and you can STEP from there.</p></li>
	<li>Breakpoint
        <p class=lindent>-sets a specific spot for code to stop.  This is most handy when you just want a general picture of a portion of code.  Using this and clicking RUN will execute your program until the line you put the BREAKPOINT on is reached (if ever...).  Once the line is reached, program execution stops, and you can step from there.  This is good for complicated "if-then" structures or complex "while" loops, where you just want to check a status variable on each loop iteration.</p></li>
	<li>Variable Contents
        <p class=lindent>-shows contents of a variable.  Probably one of the most important functions, this function lets you look at the data contained in your program.  When used in conjunction with all the rest, this will more than likely find your bug.</p></li>
    </ol>
<hr>
<center>
<table summary="navigation">
<tr>
<td height="100" width="60"><a href="../index.html"><img src=
"../images/home.gif" align="BOTTOM" alt="Home" border="0">
</a></td>
<td height="100" width="60"><a href="manual.htm"><img src=
"../images/toc.gif" align="BOTTOM" alt="TOC" border="0"></a></td>
<td height="100" width="60">
<a href="um_60.htm">
<img border="0" alt="Prev" align="bottom" src="../images/prev.gif">
</a></td>
<td height="100" width="60"><a href="um_80.htm"><img src=
"../images/next.gif" align="BOTTOM" alt="Next" border="0">
</a></td>
</tr>
</table>
</center>

Document modified on

<script type="text/javascript" language="JavaScript">
<!--
        document.write(document.lastModified + " GMT")
// -->
</body>
</html>
