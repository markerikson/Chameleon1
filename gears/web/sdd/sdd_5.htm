<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head>

<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">

<meta name="Template_Author" content="John Cox"><title>SDD: 5.0 Software Design</title></head><body>

<h1>5.0 Software Design</h1>



<h2><a name="overview">5.1 Overview</a></h2>
  <p>Development is being done in the Object Oriented Design Paradigm.  As such, the bulk of the program has been split into six major components which are described below.<br> </p> 

<h2><a name="architecture">5.2 Architecture</a><a name="architecture"></a><br></h2>

<h3>5.2.1 GUI<br></h3>
  <p>The GUI module handles the majority of the interactions with the user.&nbsp; It is, in a sense, the "master module" from which the others are invoked.&nbsp; It includes the main program window and its appearance, such as toolbars and window layout.&nbsp; It also includes the display portion of the interactive remote terminal.<br></p>
  <p>The menu bar will have no less than the following items:
  <ul>
  <li>File - commands for creating new, opening, saving, and closing files; and closing the program.</li>
  <li>Edit - selection-based text editing as well as "find" functionality.</li>
  <li>Options - various GUI options that have yet to be determined but include Permissions management.</li>
  <li>Tools - file tools, such as compiling.</li>
  <li>Help - Basic help.</li></ul><br></p>
  <p>The buttons will be extensions of the file menu.

<h3>5.2.2 Editor<br></h3>
  <p>The editor module handles the rest of the user interaction, specifically that having to do with text entry and manipulation.&nbsp; <br></p>

<h3>5.2.3 Networking<br></h3>
  <p>The networking module includes the remote access portion of the interactive terminal (ie, conveying the input to the server and returning the output), as well as the file handling details.<br></p>

<h3>5.2.4 Compilation<br></h3>
  <p>The compiler module deals with all the relevant settings for the compiler, including linking options, directories, and input files.<br></p>
  
<h3>5.2.5 Debug<br></h3>
  <p>The debugger module consists of two sections: the abstraction layer and the actual debugger.&nbsp; Since Chameleon is supposed to use both the built-in debugger and the Debugginator being developed by the Wizards of Zot, the abstraction layer handles the differences between the two and provides a single programming interface for the GUI to hook in to.&nbsp; The debugger itself is a wrapper around the open-source GDB debugger.<br></P>

<h3>5.2.6 Permissions<br></h3>
  <p>The permissions manager is a fairly small module, but is vital to the rest of the program.&nbsp; Each of the other modules, particularly the GUI module, query it to see what features are currently enabled.&nbsp; This is done during startup, and may be done when program options are changed as well.<br></p>


<h2><a name="constraints">5.3 Design Constraints</a></h2>
  <p>For the networking modules, it is assumed that there is a server that users can log into via Secure Shell (SSH).</p> 

<h2><a name="global">5.4 Global Data Objects</a><br></h2>
  <p>We plan to have no particular global objects other than those provide by the wxWindows toolkit by default (such as an Application object).&nbsp; Most objects belong to the GUI Module, which belongs to the wxWindows Application object.<br></p> 

<h2><a name="errors">5.5 Error Handling</a></h2>
  Because of the level of user we are targetting, we plan to handle as many errors internally as possible and only alert the user if absolutely necessary.&nbsp;  Because of the nature of the program, user input errors are not nearly as big an issue as they might be with other types of applications.  Because of the ownership heirarchy (wxApplication -> GUI -> modules) most errors will be dealt with by the GUI.  During testing and early stages, it is likely many errors will be displayed that won't be in the production version.  Debug-mode error logging wil be done using the ::wxLogDebug function, the wxLogWindow class, and a macro that wraps ::wxLogDebug to provide additional information, including the file name and line number where the error occurred. <br></p> 

<h2><a name="language">5.6 Development Language</a></h2>
  <p>We are using standard C++, with macros and data structures from the wxWindows toolkit.&nbsp; We plan to compile Chameleon using several different compilers, including Microsoft's C++ compiler versions 6 and 7, and the GNU MinGW compiler (whatever most-recent version is available). &nbsp;</p> 

<h2><a name="precond">5.7 Preconditions and Postconditions</a></h2>
  <p>Chameleon will be statically linked with the wxWindows libraries, eliminating the need for the wxWindows DLL to be distributed.&nbsp; It may, however, require a C++ runtime DLL.<br> </p> 
  <br>
  <p>Currently, the only data files that Chameleon will be dealing with will be C++ code files that are opened by the user.&nbsp; Upon an "Exit Program" event, the user will be notified if his current file has been modified since its last save and given an opportunity to save before exiting.<br></p>



<br>
<hr>

<center>

<table summary="navigation">

<tbody><tr>

<td height="100" width="60"><a href="../index.html"><img src="../images/home.gif" align="bottom" alt="Home" border="0">

</a></td>

<td height="100" width="60"><a href="sdd.htm"><img src="../images/toc.gif" align="bottom" alt="TOC" border="0"></a></td>

<td height="100" width="60"><a href="sdd_4.htm"><img src="../images/prev.gif" align="bottom" alt="Prev" border="0">

</a></td>

<td height="100" width="60"><a href="sdd_58.htm"><img src="../images/next.gif" align="bottom" alt="Next" border="0">

</a></td>

</tr>

</tbody></table>

</center>



Document modified on 



<script type="text/javascript" language="JavaScript">

<!--

        document.write(document.lastModified + " GMT")

// -->

</script>

</body></html>